# 标准运算符: 加(+)、减(-)、乘(*)、除(/)、整除(//)、取余(%)、幂运算(**)
print("-----------------------------------------标准运算演示")
print("1+1 = " + str(1 + 1))
print("1-1 = " + str(1 - 1))
print("2*3 = " + str(2 * 3))
print("1/2 = " + str(1 / 2))
print("5//3 = " + str(5 // 3))
print("5%3 = " + str(5 % 3))
print("5//-3 = " + str(5 // -3))  # 一正一负进行整除运算时向下取整
print("5%-3 = " + str(5 % -3))  # 一正一负取余运算，先进行取整运算得到商，被除数-(商*除数)=余数
print("-5%3 = " + str(-5 % 3))
print("2**3 = " + str(2**3))

# 赋值运算符: =
print("-----------------------------------------赋值运算演示")
n1 = 230 + 3
n2 = n3 = n4 = 233  # 链式赋值,不同变量指向同一内存地址
n5 = 230
n5 += 3  # 传参赋值
n6, n7, n8 = 2, 3, 3  # 解包赋值，可用于交换变量的值
print("n1 = 230 + 3    | " + str(n1))
print("n2 = n3 = n4 = 233    | " + str(n2) + " " + str(n3) + " " + str(n4))
print("n5 = 230  n5 += 3    | " + str(n5))
print("n6, n7, n8 = 2, 3, 3    | " + str(n6) + " " + str(n7) + " " + str(n8))
n6, n7, n8 = n8, n6, n7
print("n6, n7, n8 = n8, n6, n7    | " + str(n6) + " " + str(n7) + " " + str(n8))

# 比较运算符: >,<,==,>=,<=,!=
# 另外 is,is not 可用于比较两个变量的id是否相同
# 比较运算返回值为布尔类型bool
print("-----------------------------------------比较运算演示")
r1, r2, r3 = 2, 3, 3
r4 = r5 = 233
r6 = 233
r7 = 233.0
list1 = [2, 3, 3]
list2 = [2, 3, 3]
print("r1, r2, r3 = 2, 3, 3\nr4 = r5 = 233\nr6 = 233\nr7 = 233.0\nlist1 = [2,3,3]\nlist2 = [2,3,3]\n")
print("r1 < r2 ? " + str(r1 < r2))
print("r2 < r3 ? " + str(r2 < r3))
print("r2 == r3 ? " + str(r2 == r3))
print("r4 is r5 ? " + str(r4 is r5))  # r4与r5为链式赋值，变量指向同一内存，所以is运算为true
print("r2 is r3 ? " + str(r2 is r3))  # r2与r3虽然不是链式赋值，但是变量值相同，所以计算机会自动将其指向内存中同值的地址，所以is运算为true
print("r6 is r7 ? " + str(r6 is r7))  # r6与r7大小相等，但数据类型不同，所以is运算为false
print("list1 == list2 ? " + str(list1 == list2))
print("list1 is list2 ? " + str(list1 is list2))  # 数组即便值相等，在内存中也是分别存储，所以is运算为false

# 布尔运算符 and、or、not、in、not in
# 逻辑与或非，过于简单此处省略
# in和not in通常用于表示数字或字符(串)是否被数组或字符串(组)包含
print("-----------------------------------------布尔运算演示")
s = "hello world"
k1 = 2
k2 = 4
list3 = [2, 3, 3]
print("\ns = \"hello world\"\nk1 = 2\nk2 = 4\nlist3 = [2, 3, 3]\n")
print("o在不在hello world中 ? " + str("o" in s))
print("s在不在hello world中 ? " + str("s" in s))
print("2在不在数组[2,3,3]中 ? " + str(2 in list3))
print("4在不在数组[2,3,3]中 ? " + str(4 in list3))

# 位运算符 位与(&)、位或(|)、左移位(<<)、右移位(>>)
# 位与运算和位或运算是将数据转为二进制数，针对其每一位进行与或运算
# 位与运算时，相同位都是1，结果位才为1，否则为0
# 位或运算时，相同位都是0，结果位才是0，否则为1
print("-----------------------------------------位与或运算演示")
w1 = 233
w2 = 2333
print("w1 = 233\nw2 = 2333\n")
print("w1转为二进制为: " + bin(w1))
print("w2转为二进制为: " + bin(w2))
print("末位对齐，缺位补零\n000011101001\n100100011101\n------------\n000000001001 位与运算\n100111111101 位或运算\n")
print("转为十进制分别为:\n" + str(int("000000001001", 2)) + "\n" + str(int("100111111101", 2)) + "\n则最终结果为:\n")
print("w1 & w2 = " + str(w1 & w2))
print("w1 | w2 = " + str(w1 | w2))

# 移位运算是将数据转为二进制数，整体左移右移得到新的数
# 左移运算时，高位溢出不舍去，低位空缺补0，相当于乘2
# 右移运算时，低位溢出要舍去，高位空缺补0，相当于除2 (奇数由于二进制未位为1，则为先减1再除2)
print("-----------------------------------------位移运算演示")
print("w1 = 233\n")
print("w1转为二进制为: " + bin(w1))
print("w1左移一位，高位舍去一位，低位补0，得到: 000111010010")
print("w1右移一位，低位舍去一位，高位补0，得到: 000001110100")
print("分别转换为十进制:\n" + str(int("000111010010", 2)) + "\n" + str(int("000001110100", 2)) + "\n则最终结果为:\n")
print("w1 << 1 = " + str(w1 << 1))
print("w1 >> 1 = " + str(w1 >> 1))

# 运算优先级
# 算术运算 > 位运算 > 比较运算 > 逻辑运算 > 赋值运算符(=)
# 幂(**) > 乘除(* / // %) > 加减(+ -) > 位移(<< >>) > 位与(&) > 位或(|) > 比较(> < <= >= == !=) > 逻辑与(and) > 逻辑或(or) > 赋值(=)
